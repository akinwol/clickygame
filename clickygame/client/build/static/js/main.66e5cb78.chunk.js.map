{"version":3,"sources":["components/NavBar/nav.js","components/Header/header.js","components/Characters/characterCard.js","components/Container/container.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","score","topScore","Header","CharacterCard","alt","name","src","image","data-id","id","onClick","clickItem","Container","children","App","state","Characters","selected","shuffle","_this","sort","Math","random","setState","includes","console","log","push","this","_this2","nav","header","container","map","Character","characterCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66e5cb78.chunk.js","sourcesContent":["import React from 'react';\nimport \"./navcs.css\"\n\n// class Nav extends React.Component {\n//   // constructor(props) {\n//   //   super(props)\n//   // }\n//   render(props) {\n//     return (\n//       <div>\n//         <nav className=\"navbar navbar-dark\">\n//           <ul className=\"nav\">\n//             <li className=\"nav-item logo\">\n//               <a href=\"/\" className=\"nav-link\">  Clicky Game </a>\n//             </li>\n//             <li className=\"nav-item\">Click an image to continue</li>\n//             <li className=\"nav-item\">Score: <span>{props.children}</span> </li>\n\n//           </ul>\n\n\n//         </nav >\n//         <header className=\"header\">\n\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\nconst Nav = props => (\n  <div>\n    <nav className=\"navbar fixed-top navbar-dark\">\n      <ul className=\"nav nav-fill\">\n        <li className=\"nav-item logo\">\n          <a href=\"/\" className=\"nav-link\">  Clicky Game </a>\n        </li>\n        <li className=\"nav-item\">Click an image to continue</li>\n        <li className=\"nav-item\">Score: <span>{props.score}</span>| Top Score: <span>{props.topScore}</span> </li>\n\n      </ul>\n\n\n    </nav >\n    <header className=\"header\">\n\n    </header>\n  </div>\n\n)\n\nexport default Nav;\n","import React from \"react\";\nimport \"./headercd.css\"\n\nconst Header = () => (\n    <div className=\"jumbotron\">\n  <h1 className=\"display-3\">Clicky Game </h1>\n  <p className=\"lead\"> Click on an image to earn points but don't click on any more than once </p>\n  <hr className=\"my-2\"></hr>\n\n\n</div>\n        );\n        \nexport default Header;","import React from \"react\";\nimport \"./characterCardcs.css\";\n\nconst CharacterCard = props => (\n\n    <div className=\"col-sm-3\">\n        <div className=\"card\">\n            <div className=\"img-container\">\n            {/* on click passing in a props click item which takes in the id of the item */}\n                <img alt={props.name} src={props.image} data-id={props.id} \n                onClick={() => {props.clickItem(props.id)}}/>\n\n            </div>\n\n        </div>\n    </div>\n)\nexport default CharacterCard; ","import React from \"react\";\n\nconst Container = (props) => (\n    <div className=\"container\">\n    <div className=\"row\">\n        {props.children}\n    </div>\n\n    </div>\n\n);\nexport default Container;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Nav from \"./components/NavBar/nav\"\nimport Header from \"./components/Header/header.js\"\nimport CharacterCard from \"./components/Characters\"\nimport Characters from \"./characters.json\"\nimport Container from \"./components/Container/container.js\"\n\nclass App extends Component {\n  state = {\n    Characters,\n    selected: [],\n    score: 0,\n    topScore: 0\n\n  }\n  shuffle = (id) => {\n    // this.state.selected.push(id)\n    // console.log(this.state.selected)\n    const Characters = this.state.Characters.sort(() => Math.random() - 0.5)\n    this.setState(Characters)\n  };\n// clicked item is a prop \n  clickItem = (id) => {\n    if (this.state.selected.includes(id)) {\n      console.log(true);\n      if (this.state.topScore < this.state.score) {\n        this.setState({ score: 0, topScore: this.state.score, selected:[] })\n      }\n      else{\n        this.setState({score: 0, selected:[]})\n      }\n    }\n    else {\n      console.log(false)\n      this.state.selected.push(id)\n      console.log(this.state.selected)\n      this.setState({ score: this.state.score + 1 })\n    }\n\n\n    this.shuffle();\n\n  };\n// run the shuffle function once all the components are loaded \n  componentDidMount() {\n    this.shuffle();\n  };\n\n\n  // scoreIncrament = () => {\n\n  //   this.setState({ score: this.state.score + 1 })\n  // };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topScore}>  </Nav>\n        <Header />\n        <Container>\n          {this.state.Characters.map(Character => (\n            <CharacterCard\n              clickItem={this.clickItem}\n              key={Character.id}\n              id={Character.id}\n              name={Character.name}\n              image={Character.image} />\n          ))}\n        </Container>\n\n\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}